package com.jewelleryshop.service;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.mockito.Mockito.when;

import java.util.List;
import java.util.Optional;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import com.jewelleryshop.config.JwtTokenProvider;
import com.jewelleryshop.exception.UserException;
import com.jewelleryshop.modal.User;
import com.jewelleryshop.repository.UserRepository;

@ExtendWith(MockitoExtension.class)
public class UserServiceImplementationTest {

    @Mock
    private UserRepository userRepository;

    @Mock
    private JwtTokenProvider jwtTokenProvider;

    @InjectMocks
    private UserServiceImplementation userService;

    @BeforeEach
    public void setUp() {
        // No hardcoded values here
    }

    @Test
    public void testFindUserById_Success() throws UserException {
        // Given
        Long userId = 1L;
        User testUser = new User(); // Assume you have some user creation logic in service
        testUser.setId(userId);
        
        // Mock repository behavior
        when(userRepository.findById(userId)).thenReturn(Optional.of(testUser));

        // When
        User result = userService.findUserById(userId);

        // Then
        assertNotNull(result);
        assertEquals(userId, result.getId());
    }

    @Test
    public void testFindUserById_UserNotFound() {
        // Given
        Long userId = 1L;

        // Mock repository behavior
        when(userRepository.findById(userId)).thenReturn(Optional.empty());

        // When & Then
        UserException exception = assertThrows(UserException.class, () -> userService.findUserById(userId));
        assertEquals("user not found with id " + userId, exception.getMessage());
    }

    @Test
    public void testFindUserProfileByJwt_Success() throws UserException {
        // Given
        String jwt = "mock-jwt-token";
        String email = "john.doe@example.com";  // Simulate email retrieval from JWT
        User testUser = new User();
        testUser.setEmail(email);

        // Mock repository and token provider behavior
        when(jwtTokenProvider.getEmailFromJwtToken(jwt)).thenReturn(email);
        when(userRepository.findByEmail(email)).thenReturn(testUser);

        // When
        User result = userService.findUserProfileByJwt(jwt);

        // Then
        assertNotNull(result);
        assertEquals(email, result.getEmail());
    }

    @Test
    public void testFindUserProfileByJwt_UserNotFound() {
        // Given
        String jwt = "mock-jwt-token";
        String email = "non.existing@example.com";

        // Mock repository and token provider behavior
        when(jwtTokenProvider.getEmailFromJwtToken(jwt)).thenReturn(email);
        when(userRepository.findByEmail(email)).thenReturn(null);

        // When & Then
        UserException exception = assertThrows(UserException.class, () -> userService.findUserProfileByJwt(jwt));
        assertEquals("user not exist with email " + email, exception.getMessage());
    }

    @Test
    public void testFindAllUsers() {
        // Given
        User testUser = new User(); // Assume this user is dynamically generated by your service logic
        List<User> userList = List.of(testUser);

        // Mock repository behavior
        when(userRepository.findAllByOrderByCreatedAtDesc()).thenReturn(userList);

        // When
        List<User> result = userService.findAllUsers();

        // Then
        assertNotNull(result);
        assertEquals(1, result.size());
    }
}
